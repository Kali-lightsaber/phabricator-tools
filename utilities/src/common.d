/**
 * Copyright 2018
 * MIT License
 * Phabricator specific handling
 */
module common;
import phabricator.api;
import phabricator.common;
import phabricator.util.conv2wiki;
import phabricator.util.diffusion;
import phabricator.util.indexing;
import phabricator.util.projects;
import phabricator.util.tasks;
import phabricator.util.wiki2dash;
import std.algorithm: canFind, sort;
import std.ascii: isDigit, isPunctuation, isWhite;
import std.conv: to;
import std.datetime;
import std.getopt;
import std.json;
import std.random;
import std.string: endsWith, format, join, split, startsWith, strip, toLower;
import std.typecons;

// generic page header
private enum GenPageHeader = "
> this page is generated by a bot
> **DO NOT** edit it here
\n";

private enum PhabIndicator = "PHAB_";

// phabricator api token
private enum PhabricatorToken = PhabIndicator ~ "TOKEN";

// dashboard (to update, wiki phid)
private enum DashOpts = PhabIndicator ~ "TO_DASH";

// Unmodified tasks (project, months, room)
private enum UnmodifiedOpts = PhabIndicator ~ "UNMODIFIED";

// index settings (slug, title)
private enum IndexOpts = PhabIndicator ~ "INDEX";

// contact settings (slug, title, path, callsign)
private enum ContactsOpts = PhabIndicator ~ "CONTACTS";

// whois settings (slug, title, path, callsign)
private enum WhoIsOpts = PhabIndicator ~ "WHOIS";

// Synapse lookup resolution (Paste PHID)
private enum LookupsPHID = "LOOKUP_PHID";

// User PHID
private enum PhabricatorUser = PhabIndicator ~ "USER_PHID";

// hidden tasks (paste phid, room)
private enum HiddenOpts = PhabIndicator ~ "HIDDEN";

/**
 * Get settings
 */
private static Settings getSettings(MatrixAPI api)
{
    auto settings = Settings();
    settings.url = api.context[PhabricatorURL];
    settings.token = api.context[PhabricatorToken];
    return settings;
}

/**
 * Check opts, report if needed
 */
private static bool checkOpts(MatrixAPI api,
                              string roomId,
                              string[] segments,
                              GetoptResult opts)
{
    if (segments.length == 1 || opts.helpWanted)
    {
        api.sendHTML(roomId, getHelp(opts.options));
        return false;
    }
    else
    {
        return true;
    }
}

/**
 * Generate primitive markdown columns/tables
 */
private static string generateColumns(string[] args)
{
    return format("| %s |", join(args, " | "));
}

/**
 * Manually generate wiki from source repo
 */
private static void wikiFromSource(MatrixAPI api,
                                   string roomId,
                                   JSONValue context,
                                   string key,
                                   bool function(MatrixAPI) callback)
{
    if (isSingleCommand(context, key))
    {
        string display = "failed";
        if (callback(api))
        {
            display = "completed";
        }

        api.sendText(roomId, key ~ " update " ~ display);
    }
}

/**
 * Generate a page from a source repo location
 */
private static bool wikiFromSource(MatrixAPI api, string key, Conv mode)
{
    auto settings = getSettings(api);
    auto opts = api.context[key].split(",");
    return wikiDiffusion(settings,
                         GenPageHeader,
                         opts[0],
                         opts[1],
                         opts[2],
                         opts[3],
                         "master",
                         mode);
}

/**
 * Generate a page
 */
private static void genPage(MatrixAPI api,
                            string contextKey,
                            string[] function(MatrixAPI, Settings) callback)
{
    auto parts = api.context[contextKey].split(",");
    auto slug = parts[0];
    auto title = parts[1];
    auto settings = getSettings(api);
    auto res = callback(api, settings);
    string[] objects;
    objects ~= res[0];
    objects ~= res[1];
    foreach (obj; res[2..res.length].sort!("a < b"))
    {
        objects ~= obj;
    }

    auto page = GenPageHeader ~ "---\n\n" ~ join(objects, "\n");
    auto phriction = construct!PhrictionAPI(settings);
    phriction.edit(slug, title, page);
}
